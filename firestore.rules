rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Projects collection
    match /projects/{projectId} {
      allow read, write: if request.auth != null && (
        // For existing docs, userId must match
        (resource.data.userId == request.auth.uid) ||
        // For new docs, userId in request must match
        (request.resource.data.userId == request.auth.uid)
      );

      // Notes subcollection
      match /notes/{noteId} {
        allow read, write: if request.auth != null && (
          (resource.data.userId == request.auth.uid) ||
          (request.resource.data.userId == request.auth.uid)
        );
      }

      // Files subcollection
      match /files/{fileId} {
        allow read, write: if request.auth != null && (
          (resource.data.userId == request.auth.uid) ||
          (request.resource.data.userId == request.auth.uid)
        );
      }
    }

    // User preferences (per-user)
    match /users/{userId}/preferences/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Character workflows (if multi-user)
    match /characterWorkflows/{workflowId} {
      allow read, write: if request.auth != null && (
        (resource.data.userId == request.auth.uid) ||
        (request.resource.data.userId == request.auth.uid)
      );
      // Answers subcollection
      match /answers/{answerId} {
        allow read, write: if request.auth != null && (
          (resource.data.userId == request.auth.uid) ||
          (request.resource.data.userId == request.auth.uid)
        );
      }
    }
  }
}
